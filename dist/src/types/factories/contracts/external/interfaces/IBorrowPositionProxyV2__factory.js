"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IBorrowPositionProxyV2__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_borrowAccountOwner",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_borrowAccountNumber",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "_toAccountOwner",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_toAccountNumber",
                type: "uint256",
            },
            {
                internalType: "uint256[]",
                name: "_collateralMarketIds",
                type: "uint256[]",
            },
        ],
        name: "closeBorrowPositionWithDifferentAccounts",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_caller",
                type: "address",
            },
        ],
        name: "isCallerAuthorized",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_fromAccountOwner",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_fromAccountNumber",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "_toAccountOwner",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_toAccountNumber",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_collateralMarketId",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_amountWei",
                type: "uint256",
            },
            {
                internalType: "enum AccountBalanceLib.BalanceCheckFlag",
                name: "_balanceCheckFlag",
                type: "uint8",
            },
        ],
        name: "openBorrowPositionWithDifferentAccounts",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_fromAccountOwner",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_fromAccountNumber",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "_borrowAccountOwner",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_borrowAccountNumber",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_marketId",
                type: "uint256",
            },
            {
                internalType: "enum AccountBalanceLib.BalanceCheckFlag",
                name: "_balanceCheckFlag",
                type: "uint8",
            },
        ],
        name: "repayAllForBorrowPositionWithDifferentAccounts",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_caller",
                type: "address",
            },
            {
                internalType: "bool",
                name: "_isAuthorized",
                type: "bool",
            },
        ],
        name: "setIsCallerAuthorized",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_fromAccountOwner",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_fromAccountNumber",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "_toAccountOwner",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_toAccountNumber",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_marketId",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_amountWei",
                type: "uint256",
            },
            {
                internalType: "enum AccountBalanceLib.BalanceCheckFlag",
                name: "_balanceCheckFlag",
                type: "uint8",
            },
        ],
        name: "transferBetweenAccountsWithDifferentAccounts",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
class IBorrowPositionProxyV2__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.IBorrowPositionProxyV2__factory = IBorrowPositionProxyV2__factory;
IBorrowPositionProxyV2__factory.abi = _abi;
