"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IPendleRouter__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "receiver",
                type: "address",
            },
            {
                internalType: "address",
                name: "market",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "exactPtIn",
                type: "uint256",
            },
            {
                components: [
                    {
                        internalType: "address",
                        name: "tokenOut",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "minTokenOut",
                        type: "uint256",
                    },
                    {
                        internalType: "address",
                        name: "tokenRedeemSy",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "bulk",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "pendleSwap",
                        type: "address",
                    },
                    {
                        components: [
                            {
                                internalType: "enum IPendleRouter.SwapType",
                                name: "swapType",
                                type: "uint8",
                            },
                            {
                                internalType: "address",
                                name: "extRouter",
                                type: "address",
                            },
                            {
                                internalType: "bytes",
                                name: "extCalldata",
                                type: "bytes",
                            },
                            {
                                internalType: "bool",
                                name: "needScale",
                                type: "bool",
                            },
                        ],
                        internalType: "struct IPendleRouter.SwapData",
                        name: "swapData",
                        type: "tuple",
                    },
                ],
                internalType: "struct IPendleRouter.TokenOutput",
                name: "output",
                type: "tuple",
            },
        ],
        name: "swapExactPtForToken",
        outputs: [
            {
                internalType: "uint256",
                name: "netTokenOut",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "netSyFee",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receiver",
                type: "address",
            },
            {
                internalType: "address",
                name: "market",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "minPtOut",
                type: "uint256",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "guessMin",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "guessMax",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "guessOffchain",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "maxIteration",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "eps",
                        type: "uint256",
                    },
                ],
                internalType: "struct IPendleRouter.ApproxParams",
                name: "guessPtOut",
                type: "tuple",
            },
            {
                components: [
                    {
                        internalType: "address",
                        name: "tokenIn",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "netTokenIn",
                        type: "uint256",
                    },
                    {
                        internalType: "address",
                        name: "tokenMintSy",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "bulk",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "pendleSwap",
                        type: "address",
                    },
                    {
                        components: [
                            {
                                internalType: "enum IPendleRouter.SwapType",
                                name: "swapType",
                                type: "uint8",
                            },
                            {
                                internalType: "address",
                                name: "extRouter",
                                type: "address",
                            },
                            {
                                internalType: "bytes",
                                name: "extCalldata",
                                type: "bytes",
                            },
                            {
                                internalType: "bool",
                                name: "needScale",
                                type: "bool",
                            },
                        ],
                        internalType: "struct IPendleRouter.SwapData",
                        name: "swapData",
                        type: "tuple",
                    },
                ],
                internalType: "struct IPendleRouter.TokenInput",
                name: "input",
                type: "tuple",
            },
        ],
        name: "swapExactTokenForPt",
        outputs: [
            {
                internalType: "uint256",
                name: "netPtOut",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "netSyFee",
                type: "uint256",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
];
class IPendleRouter__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.IPendleRouter__factory = IPendleRouter__factory;
IPendleRouter__factory.abi = _abi;
