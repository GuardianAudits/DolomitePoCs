"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinearStepFunctionInterestSetter__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_lowerOptimalPercent",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_upperOptimalPercent",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [],
        name: "LOWER_OPTIMAL_PERCENT",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "NINETY_PERCENT",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "ONE_HUNDRED_PERCENT",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "OPTIMAL_UTILIZATION",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "SECONDS_IN_A_YEAR",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "TEN_PERCENT",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "UPPER_OPTIMAL_PERCENT",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_borrowWei",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_supplyWei",
                type: "uint256",
            },
        ],
        name: "getInterestRate",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "value",
                        type: "uint256",
                    },
                ],
                internalType: "struct IDolomiteInterestSetter.InterestRate",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "interestSetterType",
        outputs: [
            {
                internalType: "enum IDolomiteInterestSetter.InterestSetterType",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x60e06040523480156200001157600080fd5b5060405162000d1b38038062000d1b8339810160408190526200003491620001d0565b6200008e8183107f4c696e6561725374657046756e6374696f6e496e7465726573745365747465727f4c6f776572206f7074696d616c2070657263656e7420746f6f20686967680000620000a960201b620003e31760201c565b60809190915260a052670c7d713b49da000060c05262000368565b826200011057620000ba8262000115565b6101d160f51b620000cb8362000115565b604051602001620000df9392919062000263565b60408051601f198184030181529082905262461bcd60e51b82526200010791600401620002cf565b60405180910390fd5b505050565b60606000826040516020016200012c9190620002f0565b60408051601f19818403018152919052905060205b8015620001b9578062000154816200031d565b9150508181815181106200016c576200016c62000337565b01602001517fff000000000000000000000000000000000000000000000000000000000000001615620001b3576000620001a88260016200034d565b835250909392505050565b62000141565b505060408051600081526020810190915292915050565b60008060408385031215620001e857620001e8600080fd5b505080516020909101519092909150565b60005b8381101562000216578181015183820152602001620001fc565b8381111562000226576000848401525b50505050565b600062000237825190565b62000247818560208601620001f9565b9290920192915050565b6001600160f01b031981165b82525050565b60006200027182866200022c565b91506200027f828562000251565b6002820191506200029182846200022c565b95945050505050565b6000620002a5825190565b808452602084019350620002be818560208601620001f9565b601f01601f19169290920192915050565b60208082528101620002e281846200029a565b9392505050565b806200025d565b6000620002fe8284620002e9565b50602001919050565b634e487b7160e01b600052601160045260246000fd5b6000816200032f576200032f62000307565b506000190190565b634e487b7160e01b600052603260045260246000fd5b6000821982111562000363576200036362000307565b500190565b60805160a05160c051610953620003c8600039600061011301526000818160d2015281816101da01528181610279015261030b015260008181610149015281816101fb0152818161029a0152818161034d01526103a901526109536000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063cf762dfa11610076578063e1169a2e1161005b578063e1169a2e14610144578063e8177dcf1461016b578063ee15144b1461018b57600080fd5b8063cf762dfa1461010e578063dd0081c71461013557600080fd5b80635f792fc8146100a8578063a57e84af146100cd578063c4fa17a4146100f4578063ce47d6d4146100ff575b600080fd5b6100b7670c7d713b49da000081565b6040516100c4919061056e565b60405180910390f35b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b6100b76301e1338081565b6100b767016345785d8a000081565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b6100b7670de0b6b3a764000081565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b61017e6101793660046105d3565b61019a565b6040516100c4919061063a565b60016040516100c491906106aa565b604080516020810190915260008152826101c357506040805160208101909152600081526103dc565b816102375760405180602001604052806301e133807f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061022491906106e7565b61022e919061072e565b905290506103dc565b60008261024c670de0b6b3a764000086610742565b610256919061072e565b9050670de0b6b3a764000081106102d85760405180602001604052806301e133807f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006102c391906106e7565b6102cd919061072e565b8152509150506103dc565b670c7d713b49da000081111561038d57600067016345785d8a0000610305670c7d713b49da00008461077f565b61032f907f0000000000000000000000000000000000000000000000000000000000000000610742565b610339919061072e565b905060405180602001604052806301e133807f00000000000000000000000000000000000000000000000000000000000000008461037791906106e7565b610381919061072e565b815250925050506103dc565b60405180602001604052806301e13380670c7d713b49da0000847f00000000000000000000000000000000000000000000000000000000000000006103d29190610742565b6102c3919061072e565b9392505050565b82610494576103f182610499565b7f3a2000000000000000000000000000000000000000000000000000000000000061041b83610499565b60405160200161042d9392919061080c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261048b9160040161088d565b60405180910390fd5b505050565b60606000826040516020016104ae91906108a4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052905060205b801561054f57806104f1816108b9565b915050818181518110610506576105066108ee565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161561054a57600061053f8260016106e7565b835250909392505050565b6104e1565b505060408051600081526020810190915292915050565b805b82525050565b6020810161057c8284610566565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821661057c565b6105a981610582565b81146105b457600080fd5b50565b803561057c816105a0565b806105a9565b803561057c816105c2565b6000806000606084860312156105eb576105eb600080fd5b60006105f786866105b7565b9350506020610608868287016105c8565b9250506040610619868287016105c8565b9150509250925092565b805160208301906106348482610566565b50505050565b6020810161057c8284610623565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106105b4576105b4610648565b8061069181610677565b919050565b600061057c82610687565b61056881610696565b6020810161057c82846106a1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156106fa576106fa6106b8565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261073d5761073d6106ff565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561077a5761077a6106b8565b500290565b600082821015610791576107916106b8565b500390565b60005b838110156107b1578181015183820152602001610799565b838111156106345750506000910152565b60006107cc825190565b6107da818560208601610796565b9290920192915050565b7fffff0000000000000000000000000000000000000000000000000000000000008116610568565b600061081882866107c2565b915061082482856107e4565b60028201915061083482846107c2565b95945050505050565b6000610847825190565b80845260208401935061085e818560208601610796565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b602080825281016103dc818461083d565b80610568565b60006108b0828461089e565b50602001919050565b6000816108c8576108c86106b8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220cdf900349a0f1f7e9b2cb866669d49f9fb20c8c07411f27b9979cb41aa824a1764736f6c63430008090033";
const isSuperArgs = (xs) => xs.length > 1;
class LinearStepFunctionInterestSetter__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(_lowerOptimalPercent, _upperOptimalPercent, overrides) {
        return super.deploy(_lowerOptimalPercent, _upperOptimalPercent, overrides || {});
    }
    getDeployTransaction(_lowerOptimalPercent, _upperOptimalPercent, overrides) {
        return super.getDeployTransaction(_lowerOptimalPercent, _upperOptimalPercent, overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.LinearStepFunctionInterestSetter__factory = LinearStepFunctionInterestSetter__factory;
LinearStepFunctionInterestSetter__factory.bytecode = _bytecode;
LinearStepFunctionInterestSetter__factory.abi = _abi;
