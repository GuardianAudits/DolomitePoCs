"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLPMathLib__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "BASIS_POINTS_DIVISOR",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "PRICE_PRECISION",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x60a5610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c8063126082cf14604257806395082d2514605c575b600080fd5b604a61271081565b60405190815260200160405180910390f35b604a6c0c9f2c9cd04674edea400000008156fea26469706673582212206f3822c4d9bf0d88dfb4a5d17e60f1fcd6f283038067d9b90c5aca80bf8aa7da64736f6c63430008090033";
const isSuperArgs = (xs) => xs.length > 1;
class GLPMathLib__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.GLPMathLib__factory = GLPMathLib__factory;
GLPMathLib__factory.bytecode = _bytecode;
GLPMathLib__factory.abi = _abi;
