"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomTestVaultToken__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "asset_",
                type: "address",
            },
            {
                internalType: "string",
                name: "name_",
                type: "string",
            },
            {
                internalType: "string",
                name: "symbol_",
                type: "string",
            },
            {
                internalType: "uint8",
                name: "decimals_",
                type: "uint8",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "Approval",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "from",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "Transfer",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_receiver",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_amount",
                type: "uint256",
            },
        ],
        name: "addBalance",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address",
            },
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
        ],
        name: "allowance",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "approve",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "asset",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "balanceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "decimals",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "subtractedValue",
                type: "uint256",
            },
        ],
        name: "decreaseAllowance",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "addedValue",
                type: "uint256",
            },
        ],
        name: "increaseAllowance",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "name",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "symbol",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "totalSupply",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "transfer",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "from",
                type: "address",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "transferFrom",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x60c06040523480156200001157600080fd5b50604051620011e9380380620011e98339810160408190526200003491620002b6565b8251839083906200004d90600390602085019062000082565b5080516200006390600490602084019062000082565b5050506001600160a01b03909316608052505060ff1660a052620003a3565b828054620000909062000372565b90600052602060002090601f016020900481019282620000b45760008555620000ff565b82601f10620000cf57805160ff1916838001178555620000ff565b82800160010185558215620000ff579182015b82811115620000ff578251825591602001919060010190620000e2565b506200010d92915062000111565b5090565b5b808211156200010d576000815560010162000112565b60006001600160a01b0382165b92915050565b620001468162000128565b81146200015257600080fd5b50565b805162000135816200013b565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715620001a057620001a062000162565b6040525050565b6000620001b360405190565b9050620001c1828262000178565b919050565b60006001600160401b03821115620001e257620001e262000162565b601f19601f83011660200192915050565b60005b8381101562000210578181015183820152602001620001f6565b8381111562000220576000848401525b50505050565b60006200023d6200023784620001c6565b620001a7565b9050828152602081018484840111156200025a576200025a600080fd5b62000267848285620001f3565b509392505050565b600082601f830112620002855762000285600080fd5b81516200029784826020860162000226565b949350505050565b60ff811662000146565b805162000135816200029f565b60008060008060808587031215620002d157620002d1600080fd5b6000620002df878762000155565b94505060208501516001600160401b03811115620003005762000300600080fd5b6200030e878288016200026f565b93505060408501516001600160401b038111156200032f576200032f600080fd5b6200033d878288016200026f565b92505060606200035087828801620002a9565b91505092959194509250565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200038757607f821691505b602082108114156200039d576200039d6200035c565b50919050565b60805160a051610e23620003c660003960005050600061016f0152610e236000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806338d52e0f1161008c57806395d89b411161006657806395d89b41146101e7578063a457c2d7146101ef578063a9059cbb14610202578063dd62ed3e1461021557600080fd5b806338d52e0f1461016a578063395093511461019e57806370a08231146101b157600080fd5b806321e5383a116100bd57806321e5383a1461013357806323b872dd14610148578063313ce5671461015b57600080fd5b806306fdde03146100e4578063095ea7b31461010257806318160ddd14610122575b600080fd5b6100ec61025b565b6040516100f99190610894565b60405180910390f35b6101156101103660046108fd565b6102ed565b6040516100f99190610944565b6002545b6040516100f99190610958565b6101466101413660046108fd565b610307565b005b610115610156366004610966565b610315565b60126040516100f991906109bf565b6101917f000000000000000000000000000000000000000000000000000000000000000081565b6040516100f991906109d6565b6101156101ac3660046108fd565b610339565b6101266101bf3660046109e4565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100ec610385565b6101156101fd3660046108fd565b610394565b6101156102103660046108fd565b610418565b610126610223366004610a0d565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461026a90610a6f565b80601f016020809104026020016040519081016040528092919081815260200182805461029690610a6f565b80156102e35780601f106102b8576101008083540402835291602001916102e3565b820191906000526020600020905b8154815290600101906020018083116102c657829003601f168201915b5050505050905090565b6000336102fb818585610426565b60019150505b92915050565b6103118282610535565b5050565b6000336103238582856105ff565b61032e8585856106a6565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906102fb9082908690610380908790610acb565b610426565b60606004805461026a90610a6f565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091908381101561040b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040290610b40565b60405180910390fd5b61032e8286868403610426565b6000336102fb8185856106a6565b73ffffffffffffffffffffffffffffffffffffffff8316610473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040290610baa565b73ffffffffffffffffffffffffffffffffffffffff82166104c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040290610c14565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610528908590610958565b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8216610582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040290610c5b565b80600260008282546105949190610acb565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208190526040808220805485019055517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105f3908590610958565b60405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106a05781811015610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040290610c9f565b6106a08484848403610426565b50505050565b73ffffffffffffffffffffffffffffffffffffffff83166106f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040290610d09565b73ffffffffffffffffffffffffffffffffffffffff8216610740576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040290610d73565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902054818110156107a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040290610ddd565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061080b908690610958565b60405180910390a36106a0565b60005b8381101561083357818101518382015260200161081b565b838111156106a05750506000910152565b600061084e825190565b808452602084019350610865818560208601610818565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b602080825281016108a58184610844565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff8216610301565b6108d3816108ac565b81146108de57600080fd5b50565b8035610301816108ca565b806108d3565b8035610301816108ec565b6000806040838503121561091357610913600080fd5b600061091f85856108e1565b9250506020610930858286016108f2565b9150509250929050565b8015155b82525050565b60208101610301828461093a565b8061093e565b602081016103018284610952565b60008060006060848603121561097e5761097e600080fd5b600061098a86866108e1565b935050602061099b868287016108e1565b92505060406109ac868287016108f2565b9150509250925092565b60ff811661093e565b6020810161030182846109b6565b61093e816108ac565b6020810161030182846109cd565b6000602082840312156109f9576109f9600080fd5b6000610a0584846108e1565b949350505050565b60008060408385031215610a2357610a23600080fd5b6000610a2f85856108e1565b9250506020610930858286016108e1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600281046001821680610a8357607f821691505b60208210811415610a9657610a96610a40565b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610ade57610ade610a9c565b500190565b602581526000602082017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f000000000000000000000000000000000000000000000000000000602082015291505b5060400190565b6020808252810161030181610ae3565b602481526000602082017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529150610b39565b6020808252810161030181610b50565b602281526000602082017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f737300000000000000000000000000000000000000000000000000000000000060208201529150610b39565b6020808252810161030181610bba565b601f81526000602082017f45524332303a206d696e7420746f20746865207a65726f206164647265737300815291505b5060200190565b6020808252810161030181610c24565b601d81526000602082017f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000081529150610c54565b6020808252810161030181610c6b565b602581526000602082017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529150610b39565b6020808252810161030181610caf565b602381526000602082017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f657373000000000000000000000000000000000000000000000000000000000060208201529150610b39565b6020808252810161030181610d19565b602681526000602082017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e6365000000000000000000000000000000000000000000000000000060208201529150610b39565b6020808252810161030181610d8356fea2646970667358221220e9d8934491d7db32834deaeee40e3da9681ec08d4c7ccc9dcaf8e15cfbe97a4464736f6c63430008090033";
const isSuperArgs = (xs) => xs.length > 1;
class CustomTestVaultToken__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(asset_, name_, symbol_, decimals_, overrides) {
        return super.deploy(asset_, name_, symbol_, decimals_, overrides || {});
    }
    getDeployTransaction(asset_, name_, symbol_, decimals_, overrides) {
        return super.getDeployTransaction(asset_, name_, symbol_, decimals_, overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.CustomTestVaultToken__factory = CustomTestVaultToken__factory;
CustomTestVaultToken__factory.bytecode = _bytecode;
CustomTestVaultToken__factory.abi = _abi;
