"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRequire__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "bytes32",
                name: "payloadA",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "payloadB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "payloadC",
                type: "uint256",
            },
        ],
        name: "RequireNotThatB2",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
        ],
        name: "RequireThat0",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "payloadA",
                type: "uint256",
            },
        ],
        name: "RequireThat1",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "payloadA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "payloadB",
                type: "uint256",
            },
        ],
        name: "RequireThat2",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "payloadA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "payloadB",
                type: "uint256",
            },
        ],
        name: "RequireThat2IsTrue",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "payloadA",
                type: "address",
            },
        ],
        name: "RequireThatA0",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "payloadA",
                type: "address",
            },
        ],
        name: "RequireThatA0IsTrue",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "payloadA",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "payloadB",
                type: "uint256",
            },
        ],
        name: "RequireThatA1",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "payloadA",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "payloadB",
                type: "uint256",
            },
        ],
        name: "RequireThatA1IsTrue",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "payloadA",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "payloadB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "payloadC",
                type: "uint256",
            },
        ],
        name: "RequireThatA2",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "payloadA",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "payloadB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "payloadC",
                type: "uint256",
            },
        ],
        name: "RequireThatA2IsTrue",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "bytes32",
                name: "payloadA",
                type: "bytes32",
            },
        ],
        name: "RequireThatB0",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "bytes32",
                name: "payloadA",
                type: "bytes32",
            },
        ],
        name: "RequireThatB0IsTrue",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "reason",
                type: "bytes32",
            },
            {
                internalType: "bytes32",
                name: "payloadA",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "payloadB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "payloadC",
                type: "uint256",
            },
        ],
        name: "RequireThatB2",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50611573806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636f4667061161008c578063a0ea658d11610066578063a0ea658d146101af578063b474633a146101c2578063e4b4b192146101d5578063fa8529a4146101e857600080fd5b80636f46670614610176578063784ba813146101895780639627a1991461019c57600080fd5b80632a4e9808116100c85780632a4e98081461012a5780634f016c951461013d5780635604cbb2146101505780635f7d744c1461016357600080fd5b8063053c633a146100ef578063058b2b141461010457806319a665ef14610117575b600080fd5b6101026100fd366004610ecd565b6101fb565b005b610102610112366004610f0a565b61022c565b610102610125366004610f5a565b61025f565b610102610138366004610f5a565b610294565b61010261014b366004610ecd565b6102c3565b61010261015e366004610ff0565b6102f0565b610102610171366004610ecd565b61031e565b610102610184366004611025565b61034b565b610102610197366004611025565b61037a565b6101026101aa36600461105b565b6103a9565b6101026101bd36600461105b565b6103d6565b6101026101d036600461108e565b610403565b6101026101e3366004610f0a565b610432565b6101026101f6366004610ff0565b610460565b61022860017f5465737452657175697265000000000000000000000000000000000000000000848461048e565b5050565b61025a60007f546573745265717569726500000000000000000000000000000000000000000085858561058d565b505050565b61028e60017f546573745265717569726500000000000000000000000000000000000000000086868686610658565b50505050565b61028e60007f546573745265717569726500000000000000000000000000000000000000000086868686610658565b61022860007f54657374526571756972650000000000000000000000000000000000000000008484610750565b61025a60007f54657374526571756972650000000000000000000000000000000000000000008585856107b2565b61022860007f5465737452657175697265000000000000000000000000000000000000000000848461048e565b61028e60007f546573745265717569726500000000000000000000000000000000000000000086868686610814565b61028e60017f546573745265717569726500000000000000000000000000000000000000000086868686610814565b61022860017f54657374526571756972650000000000000000000000000000000000000000008484610876565b61022860007f54657374526571756972650000000000000000000000000000000000000000008484610876565b61042f60007f5465737452657175697265000000000000000000000000000000000000000000836108d8565b50565b61025a60017f546573745265717569726500000000000000000000000000000000000000000085858561058d565b61025a60017f54657374526571756972650000000000000000000000000000000000000000008585856107b2565b8361028e5761049c83610922565b7f3a200000000000000000000000000000000000000000000000000000000000006104c684610922565b7f203c0000000000000000000000000000000000000000000000000000000000006104f0856109f3565b6040516105269594939291907f3e0000000000000000000000000000000000000000000000000000000000000090602001611157565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261058491600401611205565b60405180910390fd5b846106515761059b84610922565b7f3a200000000000000000000000000000000000000000000000000000000000006105c585610922565b7f203c0000000000000000000000000000000000000000000000000000000000006105ef86610b92565b7f2c2000000000000000000000000000000000000000000000000000000000000061061987610b92565b60405161052697969594939291907f3e000000000000000000000000000000000000000000000000000000000000009060200161121d565b5050505050565b856107485761066685610922565b7f3a2000000000000000000000000000000000000000000000000000000000000061069086610922565b7f203c0000000000000000000000000000000000000000000000000000000000006106ba876109f3565b7f2c200000000000000000000000000000000000000000000000000000000000006106e488610b92565b7f2c2000000000000000000000000000000000000000000000000000000000000061070e89610b92565b604051610526999897969594939291907f3e0000000000000000000000000000000000000000000000000000000000000090602001611299565b505050505050565b8361028e5761075e83610922565b7f3a2000000000000000000000000000000000000000000000000000000000000061078884610922565b7f203c0000000000000000000000000000000000000000000000000000000000006104f085610b92565b84610651576107c084610922565b7f3a200000000000000000000000000000000000000000000000000000000000006107ea85610922565b7f203c0000000000000000000000000000000000000000000000000000000000006105ef86610cd2565b856107485761082285610922565b7f3a2000000000000000000000000000000000000000000000000000000000000061084c86610922565b7f203c0000000000000000000000000000000000000000000000000000000000006106ba87610cd2565b8361028e5761088483610922565b7f3a200000000000000000000000000000000000000000000000000000000000006108ae84610922565b7f203c0000000000000000000000000000000000000000000000000000000000006104f085610cd2565b8261025a576108e682610922565b7f3a2000000000000000000000000000000000000000000000000000000000000061091083610922565b60405160200161052693929190611333565b6060600082604051602001610937919061136a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052905060205b80156109d8578061097a816113ae565b91505081818151811061098f5761098f6113e3565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016156109d35760006109c8826001611412565b835250909392505050565b61096a565b5060408051600080825260208201909252905b509392505050565b604080516042808252608082019092526060918391600091602082018180368337019050509050603060f81b81600081518110610a3257610a326113e3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350607860f81b81600181518110610a7957610a796113e3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b60208110156109eb576000610ac1826002611459565b9050610acf600f8516610e85565b83610adb836041611496565b81518110610aeb57610aeb6113e3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600484901c9350610b2d600f8516610e85565b83610b39836040611496565b81518110610b4957610b496113e3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505060049290921c9180610b8a816114ad565b915050610aab565b606081610bd257505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610bfc5780610be6816114ad565b9150610bf59050600a83611515565b9150610bd6565b60008167ffffffffffffffff811115610c1757610c1761142a565b6040519080825280601f01601f191660200182016040528015610c41576020820181803683370190505b508593509050815b8015610cc95780610c59816113ae565b9150610c689050600a85611529565b610c73906030611412565b60f81b828281518110610c8857610c886113e3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610cc2600a85611515565b9350610c49565b50949350505050565b60408051602a808252606082810190935273ffffffffffffffffffffffffffffffffffffffff841691600091602082018180368337019050509050603060f81b81600081518110610d2557610d256113e3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350607860f81b81600181518110610d6c57610d6c6113e3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b60148110156109eb576000610db4826002611459565b9050610dc2600f8516610e85565b83610dce836029611496565b81518110610dde57610dde6113e3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600484901c9350610e20600f8516610e85565b83610e2c836028611496565b81518110610e3c57610e3c6113e3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505060049290921c9180610e7d816114ad565b915050610d9e565b6000600a821015610ea457610e9b603083611412565b60f81b92915050565b610e9b605783611412565b805b811461042f57600080fd5b8035610ec781610eaf565b92915050565b60008060408385031215610ee357610ee3600080fd5b6000610eef8585610ebc565b9250506020610f0085828601610ebc565b9150509250929050565b600080600060608486031215610f2257610f22600080fd5b6000610f2e8686610ebc565b9350506020610f3f86828701610ebc565b9250506040610f5086828701610ebc565b9150509250925092565b60008060008060808587031215610f7357610f73600080fd5b6000610f7f8787610ebc565b9450506020610f9087828801610ebc565b9350506040610fa187828801610ebc565b9250506060610fb287828801610ebc565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff8216610ec7565b610eb181610fbe565b8035610ec781610fdc565b60008060006060848603121561100857611008600080fd5b60006110148686610ebc565b9350506020610f3f86828701610fe5565b6000806000806080858703121561103e5761103e600080fd5b600061104a8787610ebc565b9450506020610f9087828801610fe5565b6000806040838503121561107157611071600080fd5b600061107d8585610ebc565b9250506020610f0085828601610fe5565b6000602082840312156110a3576110a3600080fd5b60006110af8484610ebc565b949350505050565b60005b838110156110d25781810151838201526020016110ba565b8381111561028e5750506000910152565b60006110ed825190565b6110fb8185602086016110b7565b9290920192915050565b7fffff00000000000000000000000000000000000000000000000000000000000081165b82525050565b7fff000000000000000000000000000000000000000000000000000000000000008116611129565b600061116382896110e3565b915061116f8288611105565b60028201915061117f82876110e3565b915061118b8286611105565b60028201915061119b82856110e3565b91506111a7828461112f565b506001019695505050505050565b60006111bf825190565b8084526020840193506111d68185602086016110b7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b6020808252810161121681846111b5565b9392505050565b6000611229828b6110e3565b9150611235828a611105565b60028201915061124582896110e3565b91506112518288611105565b60028201915061126182876110e3565b915061126d8286611105565b60028201915061127d82856110e3565b9150611289828461112f565b5060010198975050505050505050565b60006112a5828d6110e3565b91506112b1828c611105565b6002820191506112c1828b6110e3565b91506112cd828a611105565b6002820191506112dd82896110e3565b91506112e98288611105565b6002820191506112f982876110e3565b91506113058286611105565b60028201915061131582856110e3565b9150611321828461112f565b506001019a9950505050505050505050565b600061133f82866110e3565b915061134b8285611105565b60028201915061135b82846110e3565b95945050505050565b80611129565b60006113768284611364565b50602001919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000816113bd576113bd61137f565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082198211156114255761142561137f565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156114915761149161137f565b500290565b6000828210156114a8576114a861137f565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156114df576114df61137f565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611524576115246114e6565b500490565b600082611538576115386114e6565b50069056fea2646970667358221220f3c4b519b6e0a3eb927510d9d2e12a1a12245c4317180fb4ed326599e186a78a64736f6c63430008090033";
const isSuperArgs = (xs) => xs.length > 1;
class TestRequire__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.TestRequire__factory = TestRequire__factory;
TestRequire__factory.bytecode = _bytecode;
TestRequire__factory.abi = _abi;
